plugins {
    id("com.android.application")
    id("kotlin-android")
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id("dev.flutter.flutter-gradle-plugin")
    id("com.google.gms.google-services")
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader -> localProperties.load(reader) }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace 'com.aiche.aiche'
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    buildFeatures {
        buildConfig true
    }

    lint {
        disable += ['InvalidPackage']
    }

    defaultConfig {
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
        applicationId "com.aiche.aiche"
        multiDexEnabled true
        ndk {
            abiFilters "arm64-v8a"
        }
    }

    signingConfigs {
        release {
            def keystoreProperties = new Properties()
            def keystorePropertiesFile = rootProject.file('key.properties')
            if (keystorePropertiesFile.exists()) {
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
                if (keystoreProperties['storeFile']) {
                    storeFile file(keystoreProperties['storeFile'])
                }
                storePassword keystoreProperties['storePassword']
                keyPassword keystoreProperties['keyPassword']
                keyAlias keystoreProperties['keyAlias']
            }
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // Use more conservative optimization
            buildConfigField "boolean", "ENABLE_AGGRESSIVE_OPTIMIZATION", "false"
            ndk {
                abiFilters "arm64-v8a", "armeabi-v7a", "x86_64"
            }
        }
        debug {
            minifyEnabled false
            shrinkResources false
        }
    }

    packaging {
        resources {
            excludes += [
                    'META-INF/proguard/androidx-annotations.pro',
                    'META-INF/DEPENDENCIES',
                    'META-INF/LICENSE',
                    'META-INF/LICENSE.txt',
                    'META-INF/license.txt',
                    'META-INF/NOTICE',
                    'META-INF/NOTICE.txt',
                    'META-INF/notice.txt',
                    'META-INF/ASL2.0'
            ]
        }
    }

    // Removed deprecated dexOptions (AGP 8+)
}

flutter {
    source '../..'
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.window:window:1.1.0'
    implementation 'androidx.window:window-java:1.1.0'
    implementation 'com.google.android.material:material:1.10.0'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.5'
}